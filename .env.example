# Database Configuration (Docker context)
[REDACTED_DATABASE_URL]
POSTGRES_USER=postgres
# REQUIRED: Set strong password (min 32 chars recommended for production)
# Example: openssl rand -hex 32
POSTGRES_PASSWORD=postgres
POSTGRES_DB=test_db

# Flask Configuration
FLASK_ENV=development
FLASK_DEBUG=1
FLASK_APP=app.py
# REQUIRED FOR PRODUCTION: Strong secret key (min 32 chars)
# Generate with: python -c 'import secrets; print(secrets.token_hex(32))'
FLASK_SECRET_KEY=example-flask-secret
# REQUIRED FOR PRODUCTION: Strong JWT secret (min 32 chars, different from FLASK_SECRET_KEY)
# Generate with: python -c 'import secrets; print(secrets.token_hex(32))'
JWT_SECRET_KEY=example-jwt-secret
HOST=0.0.0.0
PORT=5000

# Administrative Defaults
ADMIN_EMAIL=admin@example.com

# Google OAuth Configuration
GOOGLE_CLIENT_ID=example-client-id
GOOGLE_CLIENT_SECRET=example-client-secret
OAUTHLIB_INSECURE_TRANSPORT=0  # Set to 1 ONLY for local dev without HTTPS
OAUTHLIB_RELAX_TOKEN_SCOPE=1

# Jotform Integration
JOTFORM_API_KEY=example-api-key
JOTFORM_FORM_ID=example-form-id

# Optional Google Calendar Settings
GOOGLE_CALENDAR_ID=your-calendar-id@group.calendar.google.com
[REDACTED_GOOGLE_API_KEY]
GOOGLE_SERVICE_ACCOUNT_FILE=/path/to/service-account.json

# API Documentation Settings
SHOW_API_DOCS=false

# Observability & Monitoring
# Enable Sentry test route for staging validation (NEVER set to 1 in production)
# When enabled, /__sentry-test endpoint will be available to test error tracking
DEBUG_SENTRY_TEST=0

# Logging Configuration (for Atomic Transactions)
LOG_LEVEL=INFO
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s
LOG_MAX_BYTES=10485760
LOG_BACKUP_COUNT=5

# Production Logging Control
# LOG_TO_FILE=1 (default) - Write logs to rotating files (development)
# LOG_TO_FILE=0 - Stream JSON logs only to stdout (production/Render)
LOG_TO_FILE=1

# Atomic Transaction Configuration
# Timezone Configuration (Task 2)
# Application timezone for all date/time operations
# Production: America/Sao_Paulo (Bras√≠lia time)
# Development/Test: UTC (for consistency) or America/Sao_Paulo (to match production)
# Default: UTC (safe fallback)
TZ=America/Sao_Paulo

# Extrato Backup Requirement (Task 3)
# Controls whether backup verification is required before generating monthly extrato
# true  = STRICT mode - Backup MUST exist, generation blocked if missing (recommended for production)
# false = FLEXIBLE mode - Backup optional, generation proceeds with warning (dev/test only)
# Default: true (safe default - production-safe fail-closed behavior)
# Production: MUST be 'true' to prevent data loss
# Development: Can be 'false' for faster iteration (use with caution)
EXTRATO_REQUIRE_BACKUP=true

# Atomic Extrato Configuration
ATOMIC_TRANSACTION_TIMEOUT=300
BACKUP_VERIFICATION_ENABLED=true
FORCE_GENERATION_ALLOWED=false
BATCH_SIZE=100

# CRON Configuration (Legacy - for manual cron setup reference only)
# NOTE: These variables are NOT used by the Python application.
# APScheduler is used for automated jobs instead (see ENABLE_MONTHLY_EXTRATO_JOB below).
CRON_ENABLED=false
CRON_SCHEDULE="0 2 1 * *"
CRON_LOG_FILE=/home/diego/documentos/github/projetos/tattoo_studio_system_v4/backend/logs/atomic_extrato_cron.log

# APScheduler Monthly Extrato Job (Task 1)
# Set to false in dev/test environments to prevent automatic snapshot generation
# Set to true in production for automated monthly extrato snapshots
# Schedule: Day 1 at 02:00 AM (respects min_day_threshold=2 for data completeness)
ENABLE_MONTHLY_EXTRATO_JOB=true

# Backup Configuration
BACKUP_RETENTION_DAYS=30
BACKUP_COMPRESSION_ENABLED=true
BACKUP_ENCRYPTION_ENABLED=false

# Slow Query Alerting
ALERT_SLOW_QUERY_ENABLED=true
ALERT_QUERY_MS_THRESHOLD=100
# Optional Slack incoming webhook URL for alerts
ALERT_SINK_SLACK_WEBHOOK=

# Rate Limiting Storage (Flask-Limiter)
# For local dev without Redis, leave unset or use memory storage:
# LIMITER_STORAGE_URI=memory://
# For Docker/production with Redis service:
# LIMITER_STORAGE_URI=redis://redis:6379/3

# Testing Configuration (CI/CD)
# Set to 1 to disable authentication redirects during integration tests
DISABLE_AUTH_REDIRECTS=0
# Set to 0 to disable rate limiting during tests
RATE_LIMIT_ENABLED=1
# Base URL for API integration tests (use http://app:5000 in Docker Compose)
BASE_URL=http://localhost:5000

